function now() {

  date +%Y-%m-%dT%H:%M:%S
}

function shout() {
  [ -n "$3" ] && proc="$3" || proc="user process"
  echo "`now` [${1}     ][$proc] ${2}" >&2  
  [ "${USER}" == "mapred" ] && echo "reporter:status:$( now ) [${1}  ][${proc}] ${2}" >&2
}


function assert() {

 local retval=$1
 local step=$2
 [ "${retval}" != "0" ] && shout "ERROR" "Error ${retval} - ${step}, processing aborted" 
 return ${retval}
}

steps=${1}
mission=${2}

[ -f "./settings.app" ] && {

  shout "INFO" "Settings additional parameters"
  . ./settings.app

}

[ -f "./settings.set" ] && {

  shout "INFO" "Settings environment parameters"
  . ./settings.set

} || return 1

settings apply -q -r raster_format=png


# manage orbit files
case ${mission} in
  ASAR)
    mkdir ./aux
    tar xfz ${_CIOP_APPLICATION_PATH}/adore/aux/ASAR_ODR.tgz -C ./aux
    settings apply -q -r m_orbdir=./aux/ODR
    settings apply -q -r s_orbdir=./aux/ODR
    ;;
  ERS1)
    mkdir ./aux
    tar xfz ${_CIOP_APPLICATION_PATH}/adore/aux/ERS1_ODR.tgz -C ./aux
    settings apply -q -r m_orbdir=./aux/ODR
    settings apply -q -r s_orbdir=./aux/ODR
    ;;    
  ERS2)
    mkdir ./aux
    tar xfz ${_CIOP_APPLICATION_PATH}/adore/aux/ERS2_ODR.tgz -C ./aux
    settings apply -q -r m_orbdir=./aux/ODR
    settings apply -q -r s_orbdir=./aux/ODR
    ;;
esac

# save the settings
settings save adore.set
settings list > adore.list
export multilook_factor="`cat adore.list | grep int_multilook | sed 's/int_multilook="//' | sed 's/"//' | tr " " "/" | sed 's/^/ -M/'`"


cat ${steps} | while read step
do
  shout "INFO" "processing $step"
  [ ${step:0:1} != "#" ] && eval "$step" &> ${step//[^a-zA-Z_0-9]/_}.log
  assert $? "${step}"
  res=$? 
  [ "${res}" != "0" ] && return ${res}
  
  # special handling for TSX
  [ "${step}" == "m_readfiles" ] && [ ${m_in_method} == TSX ] && sed -i 's#\(.*\)\(TDX-1\)$#\1TSX-1#g' `basename ${master}`.res
  [ "${step}" == "s_readfiles" ] && [ ${s_in_method} == TSX ] && sed -i 's#\(.*\)\(TDX-1\)$#\1TSX-1#g' `basename ${slave}`.res  

done

return 0
